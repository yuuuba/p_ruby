# 基礎

テキストコミュニケーション能力,質問能力をみつけたい
・slack ruby-jpで質問する
・githubでプルリクのコミュニケーションを重ねる

思考能力を身に付けたい
・答えのない実装に取り組む時に、自分で考えて解決できるような力
・slack ruby-jpで質問する
・議論（隔日21時半から1時間）
  ・沈黙ではなく発言を、説得ではなく共感を、利己ではなく利他を
  ・嫌われる、嫌われないは気にしない、⭐️論理的にゴールに向かって話ができるかどうか組み立てて〇〇だから〇〇という説明ができるか、傾聴する姿勢があるか（質問をして答えを導こうとするか）、相槌、嫌な返しされた時に一つおいて議題に沿って話ができるか、棘のある言葉や言い方しない癖付け、人と話す練習、自分の意見を言う練習、人と話し合う練習
  ・自分の言いたいことを伝えられるか、またその空気を出すことができるか（ちょっと中学生マインドほしい）

#出てくる用語について
またの名をパターンと名前が似ているのでまとめたい

ローカル変数（変数）
  変数
インスタンスメソッド
  クラスで定義したメソッド
インスタンス変数  @
  クラス内でどこからでも参照できる変数
クラス変数       @@(非推奨気味)
  クラスとサブクラスで共有される変数（インスタンスでは共有されない）
クラスインスタンス変数（クラス直下に@hoge）
  クラスでのみ共有される変数（継承先には共有されない）
クラスメソッド（特異メソッド）
  オブジェクトに定義されるメソッド
特異クラス
  クラスメソッドを定義しているクラス（クラスメソッドだけ定義しているつもりでもそれは特異クラスの中に特異メソッドが定義されている）

代入メソッド（セッターメソッド）
  代入しているように見えるけどメソッド呼び出ししてるんだよのやつ


# お題
# Hero クラスを定義、「引数ありメソッドと attr_* の使い分け」、hero同士を戦わせる
# 名前（@name）とレベル（@level）のインスタンス変数を持たせる
# 初期値を渡して設定（initialize）
# introduce メソッドを作って、「こんにちは！◯◯です。レベルは◯◯です。」と表示
# 実際に Hero.new でインスタンスを作って、introduce を呼び出す

class Hero
  attr_reader :name, :level

  def initialize(name,level)
    @name = name
    @level = level
  end

  def introduce
    "こんにちは！#{name}です。レベルは#{level}です。"
  end
end

hero1 = Hero.new("田中",15)
hero1.introduce

疑問：
・どこから書き始めればいい？インスタンス作るとこ途中で意識したしクラス書いてメソッド書いてでいい？
→「こういうことをやりたい」から逆算する（＝インスタンス作るとこを最初にイメージ）
# 試しにこう使いたい（こうすると良いけど絶対的な正解ではなく使い方と定義行ったり来たりでいいらしい）
p Hero.new("田中", 15).introduce

# あとで定義を書いていく（↑これに合わせる形で）


例：Hero.new("田中", 15).introduce ってやりたいなー

じゃあ、Hero クラスが必要だなと考える

initialize で名前とレベル受け取らせよう

その後に introduce メソッドを定義する

実際に使うためにどう返すか考える

イメージで言うと「プレゼンの流れ」みたいな感じ：
ゴール：「このクラスで何をしたいのか？」（=インスタンスでこういう振る舞いをさせたい）

**中身：**そのためにクラスで何を持ってて、どう振る舞うか？

# 引数ありのメソッドの練習
# 「好きな食べ物」と「食べた個数」を引数にして、
# 「〇〇を××個食べました！」って返すメソッドを作ってみよう！
class User
  attr_reader :food, :num

  def initialize(food, num)
    @food = food
    @num = num
  end

  def eat(tuika, kosuu)
    "#{tuika}を#{kosuu}個食べました"
  end
end
user1 = User.new("いちご",10)
user1.eat("みかん",3)

## 代入とメソッド呼び出し（セッター）の違い
代入とセッターメソッドの呼び出し見た目が似ている
→notion「記事投稿」に移動

#メソッドの練習
→method_practice.rbにて
# メソッドにおける引数の種類
•	位置引数（必須）
•	デフォルト引数（初期値あり）
•	可変長引数（*args）
•	キーワード引数（必須）
•	キーワード引数（初期値あり）
•	任意のキーワード引数（**kwargs）
•	ブロック引数（&block）
•	引数展開（*配列, **ハッシュ）
# メソッドにおける引数に渡すデータ型の種類


# お題：
# Hero クラスを作って、ヒーロー同士で戦わせよう！

# 条件：
# Hero クラスは name と hp（体力）を持つ
# attr_reader, attr_writer, attr_accessor のいずれかを使ってアクセス制御すること
# attack メソッドを持ち、他のヒーローを攻撃してHPを10減らす
# 攻撃された側は hp が減る（マイナスにもなり得る）
class Hero
  attr_reader :name, :hp

  def initialize(name, hp)
    @name = name
    @hp = hp
  end

end

class Battle



  def attack
    hp -= 10
  end
end

hero1 = Hero.new("田中", 100)
hero2 = Hero.new("吉田", 120)

round1 = Battle.new(hero1,hero2)
round1.attack
なんか違うよね

・メソッド引数あり複数パターン
→やったけど練習したい

def greet(name, age='不明')
  "こんにちは,#{name}さん、あなたは#{age}歳ですね"
end
greet('yuya')

def calculate_total(*prices, tax_rate: 0.1)
  total = prices.sum
  tax = total * tax_rate
  total_with_tax = total + tax
  { total: total, tax: tax, total_with_tax: total_with_tax }
end

cart_prices = [1000,2000,3000]
・昨日まで学んだ内容の復習（概要的なこと、メソッド、）、AIに説明、記事投稿
・[WIP]引数あり複数パターンやるにあたってのデータ型あれこれ
・クラス内、メソッド内、クラス外からの呼び出し等各スコープ
・戻り値について（メソッドの最終行が戻り値だよねの話）（next/break, exitやabort,throw+catch,raise）
・Hero同士バトルさせるやつ
・[2025/04/11　ここまでやりたい]モンスターのやつで①網羅したやつ

・クラス作成、メソッドやクラスにおけるスコープ（ローカル変数、インスタンス変数、クラス変数、メソッドだけのパターンかクラスを定義した上での呼び出し方法）
# ①基本的なクラスを使う知識
#     メソッド定義、利用、引数のあるメソッド定義、利用、定数、ブロック（スコープについても）、コンストラクタ（initialize）の定義、利用、３種類のアクセサの定義、利用、使い分け、例外、パターンマッチ
# ②少し応用的なクラス知識
#   ・アクセス修飾子（アクセス制御、可視性）、self,継承、super,module、名前空間（namespace、クラスとかmoduleとか定義、使い方）、：：の種類
#     継承とmoduleにおいてのスコープ（ローカル変数、インスタンス変数、クラス変数）、クラス変数、クラスインスタンス変数、クラスメソッド（特異メソッド）、特異クラス
# ③応用的なクラス知識
#   ・無名関数（≒ラムダ・Proc）、無名クラス（メタプロっぽいklass = Class.newのやつ）、クラス設計について（クラス分けの考え方実行クラスとか、継承使うべきかmoduleかとか）
#   ・ファイル操作（File, Dir）、時刻・日付（Time, Date）、JSONやCSV、YAMLの扱い（実務で地味に使う）、コードの分割・責務意識の習慣（単一責任、依存）
# 4 他人のコードを読む癖、それがどこにあるのか何を見ればいいのかわからない
