# 以下の配列に「grape」を追加し、「banana」を削除してください。

fruits = ["apple", "banana", "orange"]

fruits.delete("banana")
fruits.push("grape")

p fruits

# 以下の配列から、3文字以上の単語だけを取り出して新しい配列を作ってください。

words = ["hi", "cat", "house", "a", "dog"]

words.select do |word|
  word.length >= 3
end

# あなたはAPIから次のようなユーザー情報を受け取りました。 この中から「30歳以上のユーザーの名前一覧」を文字列で出力してください（カンマ区切り）。
users = [
  { name: "佐藤", age: 28 },
  { name: "鈴木", age: 35 },
  { name: "田中", age: 42 },
  { name: "高橋", age: 22 }
]

# => "鈴木, 田中"

names = users
    .select { |user| user[:age] >= 30 }
    .map    { |user| user[:name] }

問題2：全ユーザーの名前を「さん付け」で配列にして with_suffix に代入してください（{}使って）
with_suffix = users
    .map    { |user| user[:name].concat("さん") }

※配列のハッシュの形を崩さずさん付けする場合

hoge = users
  .map { |user| user[:name] << "さん" }

✅ 1. 追加・削除系
# Q1-1: 配列 [1, 2, 3] に 4 を末尾に追加せよ。
[1, 2, 3].push(4)
[1, 2, 3] << 4
# Q1-2: 配列 ["a", "b", "c"] の先頭に "z" を追加せよ。
["a","b","c"].unshift("z")
# Q1-3: 配列 [1, 2, 3, 4] の末尾を削除せよ。
[1,2,3,4].pop
✅ 2. 検索・抽出・条件系
# Q2-1: 配列 [5, 10, 15, 20] に 10 が含まれているか調べよ。
[5, 10, 15, 20].include?(10)
# Q2-2: 配列 [1, 3, 5, 8] から偶数を取り出して新しい配列にせよ。
[1,3,5,8].select {|n| n.even? }
# Q2-3: 配列 [4, 7, 9, 12] で最初に3の倍数になる数を返せ。
[4,7,9,12].find {|n| n % 3 == 0 }
✅ 3. 変換・マッピング系
# Q3-1: 配列 [1, 2, 3] を2倍した新しい配列を作れ。
[1,2,3].map {|n| n * 2 }
# Q3-2: 配列 ["a", "b", "c"] を ["A", "B", "C"] に変換せよ。
['a','b','c'].map { |s| s.upcase }
['a','b','c'].map(&:upcase)
# Q3-3: ネスト配列 [[1,2],[3,4]] をフラットにせよ。
[[1,2],[3,4]].flatten
[[1,2],[3,4]].each do |ary|
  ary.map {|n| n * 2}
end
# Q3: each を使って new_array に2倍した値を追加していく形にせよ

new_array = []
[5, 10, 15].each do |n|
  new_array << n * 2
end

puts new_array.inspect
✅ 4. 並び替え・逆順系
# Q4-1: 配列 [3, 1, 4, 2] を昇順に並び替えよ。
[3,1,4,2].sort
# Q4-2: 配列 ["z", "x", "y"] をランダムにシャッフルせよ。
[3,1,4,2].shuffle
# Q4-3: 配列 [1, 2, 3] を逆順にせよ。
[1,2,3].reverse
✅ 5. 重複処理系
# Q5-1: 配列 [1, 1, 2, 2, 3] から重複を除け。
.uniq
# Q5-2: 配列 ["a", "b", "a", "c"] の各要素の出現回数を求めよ。
['a','b','a','c'].tally
# Q5-3: 配列 [1, 1, 2] のユニーク化を破壊的に実行せよ。
[1,1,2].uniq!
✅ 6. 集計・数値処理系
# Q6-1: 配列 [1, 2, 3] の合計を求めよ。
[1,2,3].sum
# Q6-2: 配列 [3, 5, 7] の最大値を求めよ。
[3,5,7].max
# Q6-3: 配列 [10, 20, 30] を inject で合計せよ。
✅ 7. 論理判定系
# Q7-1: 配列 [2, 4, 6] のすべてが偶数か？
[2,4,6].all? { |n| n.even? }
# Q7-2: 配列 [1, 3, 5, 8] に偶数が含まれているか？
[1,3,5,8].any? { |n| n.even? }
# Q7-3: 配列 [1, 3, 5] に 10 未満でない数が1つでもあるか？
[1,3,5].any? { |n| n >= 10 }
✅ 8. 変更・代入・スライス系
# Q8-1: 配列 [10, 20, 30] の2番目の要素を100に変更せよ。
[10,20,30].insert(1,100)
# Q8-2: 配列 [1, 2, 3, 4] から index 1〜2 の部分配列を取得せよ。
nums = [1,2,3,4]
nums[1..2]
# Q8-3: 配列 [0, 0, 0] をすべて "a" に置き換えよ。
[0,0,0].fill('a')
✅ 9. 結合・分割系
# Q9-1: 配列 ["a", "b", "c"] を "-" で連結せよ。
['a','b','c'].join('-')
# Q9-2: 配列 [1, 2] と ["a", "b"] を組み合わせてペア配列を作れ。about:blank#blocked
[1,2].zip(['a','b'])
# Q9-3: 配列 [1, 2, 3] と [3, 4] の和集合を求めよ。
[1,2,3] | [3,4]
✅ 10. ブロック・繰り返し系
# Q10-1: 配列 ["a", "b", "c"] を each で1つずつ出力せよ。
['a','b','c'].each { |s| puts s }
# Q10-2: 配列 [10, 20, 30] を each_with_index で表示せよ。
[10,20,30].each_with_index { |num, idx| p [num,idx] }
# Q10-3: 配列 [1, 2, 3] を each_with_object で {"1"=>"odd", "2"=>"even"...} に変換せよ。
[1,2,3].each_with_object({}) { |n, hash| hash[n.to_s] = n.even? ? 'even' : 'odd' }
