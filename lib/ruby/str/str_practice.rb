# =====================================
# 1. 文字列の取得・操作
# =====================================

# 問題1: 与えられた文字列を指定の長さに左側パディングしなさい（スペース使用）
str = "hogehoge"
str << " " * 5

# 問題2: 与えられた文字列が空文字かどうかを判定する関数を作りなさい
"hogehoge".empty?
"".empty?
# 問題3: 与えられた文字列から、開始インデックスと終了インデックスで部分文字列を抽出しなさい
str = "hogehoge"
first = str[0]
last = str[-1]
[first, last]

str.chars.values_at(0,-1)
# =====================================
# 2. 文字列の検索・置換
# =====================================

# 問題1: 与えられた文字列が特定の部分文字列を含むかどうかを判定しなさい
str = "楽しいRuby"
give_str = "Ruby"

str.include?(give_str)

# 問題2: 最初に見つかった "foo" を "bar" に置換する関数を作りなさい
str = "楽しいRuby"
str.sub("Ruby", "Python")
# 問題3: 与えられた文字列の中の "apple" を "orange" に、"banana" を "grape" にすべて置換しなさい
'apple banana'.split.map do |str|
  if str.eql?('apple')
    str.gsub(/apple/, 'orange')
  elsif str.eql?('banana')
    str.gsub(/banana/, 'grape')
  else
    str
  end
end.join(" ")

replacements = { 'apple' => 'orange', 'banana' => 'grape' }
'apple banana'.split.map { |str| replacements[str] || str }.join(' ')

# =====================================
# 3. 文字列の変換・フォーマット
# =====================================

# 問題1: 与えられた文字列をすべて大文字に変換する関数を作りなさい
str.upcase
# 問題2: 文字列の先頭1文字だけを大文字にして、残りはそのままにする関数を作りなさい
str.capitalize
# 問題3: 与えられた文字列を逆順に並べ替える関数を作りなさい
def str_reverse(str)
  str.reverse
end

puts str_reverse("hogehoge")
# =====================================
# 4. 正規表現関連
# =====================================

# 問題1: 与えられた文字列がメールアドレス形式かどうかを正規表現で判定しなさい

# 問題2: 文字列からすべての数字を抽出して配列で返す関数を作りなさい

# 問題3: 文字列内の "cat" を "dog" に正規表現を使ってすべて置換しなさい

# =====================================
# 5. エンコーディング関連
# =====================================

# 問題1: 与えられた文字列が UTF-8 エンコーディングであるかを判定する関数を作りなさい

# 問題2: 与えられた文字列を Shift_JIS に変換する関数を作りなさい

# 問題3: 与えられた文字列が正しいエンコーディングかどうかを判定しなさい

# =====================================
# 6. バイト列・エスケープ
# =====================================

# 問題1: 文字列のバイトサイズ（バイト数）を返す関数を作りなさい

# 問題2: バイト配列を UTF-8 の文字列に変換する関数を作りなさい

# 問題3: 文字列をバイト配列に変換する関数を作りなさい

# =====================================
# 7. 空白・改行・トリミング関連
# =====================================

# 問題1: 文字列の前後の空白をすべて取り除く関数を作りなさい
# ex: "   hello world   " => "hello world"
"   hello world   ".strip
# 問題2: 文字列内のすべての改行を削除する関数を作りなさい
# ex: "hello\nworld" => "helloworld"
"hello\nworld".gsub(/[\r\n]/,"")
# 問題3: タブ文字や改行を含む文字列から、行数をカウントする関数を作りなさい
# ex: str = "a\nb\nc" => 3
def line_counter(str)
  str.split("\n").size
end
str = "a\nb\nc"
puts line_counter(str)

# =====================================
# 8. 文字コード・数値変換関連
# =====================================

# 問題1: 文字列 "1234" を整数に変換する関数を作りなさい
# ex: "1234" => 1234

# 問題2: 数字の 42 を文字列に変換して、"Hello 42" という文字列を作りなさい
# ex: 42 => "Hello 42"
42.to_s.prepend('Hello ')
# 問題3: 1文字ずつの文字列配列 ["a", "b", "c"] を連結して "abc" にする関数を作りなさい
# ex: ["a", "b", "c"] => "abc"
def gattai(ary)
  ary.join
end

# =====================================
# 9. 分割・結合関連
# =====================================

# 問題1: カンマ区切りの文字列 "a,b,c" を配列に分割しなさい
# ex: "a,b,c" => ["a", "b", "c"]
.split(",")
# 問題2: スペースで区切られた文字列を "-" でつないで1つの文字列に戻しなさい
# ex: "hello world ruby" => "hello-world-ruby"
puts "hello world ruby".gsub(/ /, '-')
# 問題3: 任意の文字列を N 文字ずつに分割して配列にする関数を作りなさい
# ex: ("abcdef", 2) => ["ab", "cd", "ef"]
n = 2
str = "abcdef"
puts str.scan(/.{1,#{n}}/)

# =====================================
# 10. 文字列比較・照合関連
# =====================================

# 問題1: 与えられた2つの文字列が完全一致するか判定する関数を作りなさい
# ex: "abc", "abc" => true
def str_check(str1,str2)
  str1.eql?(str2)
end
str1 = "hoge"
str2 = "hoge"
puts str_check(str1,str2)

# 問題2: 文字列が辞書順で他の文字列より前か後かを比較して判定しなさい
# ex: "apple", "banana" => "before"
def check(str1,str2)
  if str1 < str2
    "before"
  elsif str1 > str2
    "after"
  else
    "same"
  end
end

# 問題3: 文字列の先頭5文字が同じかどうかを比較する関数を作りなさい
# ex: "hello_world", "hello_ruby" => true
def str_five_check(str1,str2)
  str1[0...5].eql?(str2[0...5])
end
# -------------------------------------
# 1. 基本操作
# よく使う：length, empty?, strip, start_with?, end_with?
# -------------------------------------

# Q1-1. 文字列 "hello" の長さを求めよ

# Q1-2. 空文字列 "" が空かどうか判定せよ

# Q1-3. 文字列 "  hello  " の前後の空白を除去せよ
"  hello  ".strip
# Q1-4. 文字列 "ruby on rails" が "rails" で終わるか判定せよ
"ruby on rails".end_with?("rails")
# -------------------------------------
# 2. 検索・置換・抽出系（使用頻度高）
# よく使う：include?, gsub, sub, slice, []
# -------------------------------------

# Q2-1. "banana" に "na" が含まれるか判定せよ

# Q2-2. "apple pie" の "pie" を "juice" に置換せよ
"apple pie".gsub(/pie/, 'juice')
# Q2-3. "banana" の最初の "a" を削除せよ
'banana'.sub('a','')
# Q2-4. "banana" の "na" をすべて "NA" に置換せよ
"banana".gsub(/na/,"NA")
# Q2-5. "abcdefg" の3文字目から2文字を取り出せ（0始まり）
'abcdefg'.slice(2,2)
# -------------------------------------
# 3. 分割・結合系（よくある文字列操作）
# よく使う：split, chars, join
# -------------------------------------

# Q3-1. "apple,banana,cherry" を "," で分割して配列にせよ

# Q3-2. "ruby" を1文字ずつの配列にせよ

# Q3-3. 配列 ["a", "b", "c"] を "-" 区切りの文字列に結合せよ

# -------------------------------------
# 4. 大文字・小文字・変換系（APIデータ整形などで使う）
# よく使う：upcase, downcase, capitalize, swapcase
# -------------------------------------

# Q4-1. "hello" をすべて大文字にせよ

# Q4-2. "HELLO" をすべて小文字にせよ

# Q4-3. "ruby" の先頭だけ大文字にせよ
"ruby".capitalize
# Q4-4. "RuBy" の大文字・小文字を反転せよ
"RuBy".swapcase
# -------------------------------------
# 5. 繰り返し・埋め込み・整形（表示調整などで便利）
# よく使う：*（繰り返し）, rjust, center
# -------------------------------------

# Q5-1. "ha" を3回繰り返した文字列を作れ
'ha' * 3
# Q5-2. "7" を5桁になるようにゼロ埋め（右寄せ）せよ
'7'.rjust(5,'0')
# Q5-3. "cat" を10文字分の幅に中央寄せで表示せよ
'cat'.center(10)
# -------------------------------------
# 6. 文字列の走査・繰り返し処理（1文字ずつ処理する系）
# よく使う：each_char, lines, scan
# -------------------------------------

# Q6-1. "ruby" の各文字を1文字ずつ出力せよ
'ruby'.each_char {|c| puts c }
# Q6-2. "apple\nbanana\ncherry" の各行を配列にせよ
"apple\nbanana\ncherry".lines
# Q6-3. "2025-05-13" から数字だけを抽出して配列にせよ
"2025-05-13".scan(/\d+/)
# -------------------------------------
# 7. フォーマット・挿入（表示用文字列生成）
# よく使う：%演算子, sprintf
# -------------------------------------

# Q7-1. 数字 7 を "007" という形式で出力せよ
7 % "%03d"
# Q7-2. "My name is %s" に "Yuuya" を埋め込んで出力せよ
sprintf("My name is %s", "Yuuya")
# -------------------------------------
# 8. エスケープ・エンコード・安全系（バグ回避に大事）
# よく使う：ascii_only?, inspect
# -------------------------------------

# Q8-1. "こんにちは".ascii_only? を使ってASCIIのみか判定せよ

# Q8-2. "hello\nworld" をそのままエスケープ表示せよ
'hello\nworld'
# -------------------------------------
# 9. 条件判定・比較系（バリデーションで使う）
# よく使う：casecmp, match?, =~
# -------------------------------------

# Q9-1. "apple" と "APPLE" を大文字小文字無視で比較せよ
"apple".casecmp("APPLE")
# Q9-2. "hello" に正規表現 /ll/ がマッチするかを真偽値で出力せよ
"hello".match(/ll/)
# -------------------------------------
# 10. 文字コード・バイト操作（あまり使わないけど知ってると強い）
# よく使う：ord, chr, bytes
# -------------------------------------

# Q10-1. "A" の文字コードを出力せよ

# Q10-2. 文字コード 66 を文字に変換せよ

# Q10-3. "AB" のバイト配列を出力せよ
